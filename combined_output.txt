=== COMBINED LOGS AND CODE ===
>>> RUNTIME LOGS
================================================
Sun Feb 23 06:08:25 PM EST 2025
================================================
warning: unused import: `ark_bn254::Fr`
 --> src/quantum_auth/commitment.rs:1:5
  |
1 | use ark_bn254::Fr;
  |     ^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `commitment::QuantumCommitment`
 --> src/quantum_auth/mod.rs:5:5
  |
5 | use commitment::QuantumCommitment;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `std::path::PathBuf`
 --> src/zk/proof.rs:7:5
  |
7 | use std::path::PathBuf;
  |     ^^^^^^^^^^^^^^^^^^

warning: variable does not need to be mutable
  --> src/quantum_auth/commitment.rs:13:13
   |
13 |         let mut value = [0u8; 32];
   |             ----^^^^^
   |             |
   |             help: remove this `mut`
   |
   = note: `#[warn(unused_mut)]` on by default

warning: `qkd_client` (lib) generated 4 warnings (run `cargo fix --lib -p qkd_client` to apply 4 suggestions)
warning: unused import: `std::path::PathBuf`
 --> src/zk/proof.rs:7:5
  |
7 | use std::path::PathBuf;
  |     ^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `ark_bn254::Fr`
 --> src/quantum_auth/commitment.rs:1:5
  |
1 | use ark_bn254::Fr;
  |     ^^^^^^^^^^^^^

warning: function `build_test_circuit` is never used
 --> src/zk/circuit.rs:6:14
  |
6 | pub async fn build_test_circuit() -> Result<CircomCircuit<Fr>, Box<...
  |              ^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(dead_code)]` on by default

warning: `qkd_client` (bin "qkd_client") generated 5 warnings (2 duplicates) (run `cargo fix --bin "qkd_client"` to apply 2 suggestions)
    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.27s
     Running `target/debug/qkd_client`
🌟 Starting Reporter Node...
[2m2025-02-23T23:08:25.820290Z[0m [34mDEBUG[0m [2mqkd_client::reporter::qkd_client[0m[2m:[0m Loading PKCS#12 and CA certificates...
[2m2025-02-23T23:08:25.820315Z[0m [34mDEBUG[0m [2mqkd_client::reporter::qkd_client[0m[2m:[0m 📂 Reading file: /home/paraxiom/qkd_client/certificate/Toshiba/certs/client_alice.p12
[2m2025-02-23T23:08:25.820350Z[0m [34mDEBUG[0m [2mqkd_client::reporter::qkd_client[0m[2m:[0m ✅ Successfully read 4494 bytes
[2m2025-02-23T23:08:25.820362Z[0m [34mDEBUG[0m [2mqkd_client::reporter::qkd_client[0m[2m:[0m 📂 Reading file: /home/paraxiom/qkd_client/certificate/Toshiba/certs/ca_crt.pem
[2m2025-02-23T23:08:25.820380Z[0m [34mDEBUG[0m [2mqkd_client::reporter::qkd_client[0m[2m:[0m ✅ Successfully read 2155 bytes
[2m2025-02-23T23:08:25.861793Z[0m [34mDEBUG[0m [2mqkd_client::reporter::qkd_client[0m[2m:[0m Retrieving key from https://192.168.0.4/api/v1/keys/bobsae/enc_keys
[2m2025-02-23T23:08:25.861814Z[0m [34mDEBUG[0m [2mqkd_client::reporter::qkd_client[0m[2m:[0m Sending request: KeyRequest { sae_id: "bobsae", key_size: 256, number_of_keys: 1 }
[2m2025-02-23T23:08:25.862152Z[0m [34mDEBUG[0m [2mhyper::client::connect::http[0m[2m:[0m connecting to 192.168.0.4:443
[2m2025-02-23T23:08:25.862607Z[0m [34mDEBUG[0m [2mhyper::client::connect::http[0m[2m:[0m connected to 192.168.0.4:443
[2m2025-02-23T23:08:25.881840Z[0m [34mDEBUG[0m [2mhyper::proto::h1::io[0m[2m:[0m flushed 245 bytes
[2m2025-02-23T23:08:25.970903Z[0m [34mDEBUG[0m [2mhyper::proto::h1::io[0m[2m:[0m parsed 5 headers
[2m2025-02-23T23:08:25.970951Z[0m [34mDEBUG[0m [2mhyper::proto::h1::conn[0m[2m:[0m incoming body is content-length (113 bytes)
[2m2025-02-23T23:08:25.971022Z[0m [34mDEBUG[0m [2mhyper::proto::h1::conn[0m[2m:[0m incoming body completed
[2m2025-02-23T23:08:25.971162Z[0m [34mDEBUG[0m [2mhyper::client::pool[0m[2m:[0m pooling idle connection for ("https", 192.168.0.4)
[2m2025-02-23T23:08:25.971244Z[0m [34mDEBUG[0m [2mqkd_client::reporter::qkd_client[0m[2m:[0m Response status: 200 OK
[2m2025-02-23T23:08:25.971350Z[0m [32m INFO[0m [2mqkd_client::reporter::qkd_client[0m[2m:[0m Successfully retrieved key with ID: f5135471-9f32-4625-9b1b-aeef9bff58df
[2m2025-02-23T23:08:25.971382Z[0m [34mDEBUG[0m [2mqkd_client::reporter[0m[2m:[0m Key retrieved in 109.594674ms
Starting proof generation for key...
Key bytes length: 32
Verifying circuit files...
Created input file at "/home/paraxiom/qkd_client/circuits/input.json"
Generating witness...
✅ Generated witness successfully
Generating proof...
✅ Generated proof successfully
Reading proof and verification key...
✅ Read proof and verification key successfully
[2m2025-02-23T23:08:26.741616Z[0m [34mDEBUG[0m [2mqkd_client::reporter[0m[2m:[0m Proof generated in 770.202639ms
Starting proof verification...
Wrote verification files
Verifying proof...
✅ Proof verified successfully
[2m2025-02-23T23:08:27.237648Z[0m [32m INFO[0m [2mqkd_client::reporter[0m[2m:[0m ✅ Proof verified successfully in 495.98206ms

📊 Reporter Node Metrics:
Key Retrieval Time: 109.594674ms
Proof Generation Time: 770.202639ms
Verification Time: 495.98206ms

>>> MAIN.RS CODE
================================================
// src/main.rs
mod reporter;
mod zk;
mod quantum_auth;

use reporter::ReporterNode;
use tracing_subscriber::FmtSubscriber;

#[tokio::main]
async fn main() {
    // Setup logging
    let subscriber = FmtSubscriber::builder()
        .with_max_level(tracing::Level::DEBUG)
        .finish();
    tracing::subscriber::set_global_default(subscriber)
        .expect("setting default subscriber failed");

    println!("🌟 Starting Reporter Node...");

    // Create and run reporter node
    match ReporterNode::new() {
        Ok(reporter) => {
            match reporter.report().await {
                Ok(metrics) => {
                    println!("\n📊 Reporter Node Metrics:");
                    println!("Key Retrieval Time: {:?}", metrics.key_retrieval_time);
                    println!("Proof Generation Time: {:?}", metrics.proof_generation_time);
                    println!("Verification Time: {:?}", metrics.verification_time);
                }
                Err(e) => println!("❌ Reporting failed: {}", e),
            }
        }
        Err(e) => println!("❌ Failed to create Reporter Node: {}", e),
    }
}
