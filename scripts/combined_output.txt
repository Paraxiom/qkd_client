=== COMBINED LOGS AND CODE ===
>>> RUNTIME LOGS
================================================
Sun Mar  2 02:05:25 PM EST 2025
================================================
warning: unused import: `Mutex`
 --> src/byzantine/buffer.rs:4:22
  |
4 | use std::sync::{Arc, Mutex, RwLock};
  |                      ^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `info`
 --> src/byzantine/buffer.rs:6:22
  |
6 | use tracing::{debug, info, warn};
  |                      ^^^^

warning: unused import: `error`
 --> src/byzantine/consensus.rs:5:22
  |
5 | use tracing::{debug, error, info, warn};
  |                      ^^^^^

warning: unused import: `ReporterEntry`
 --> src/byzantine/consensus.rs:7:63
  |
7 | use crate::byzantine::buffer::{ConsensusMessage, MessageType, ReporterEntry, SharedBuffer};
  |                                                               ^^^^^^^^^^^^^

warning: unused import: `crate::quantum_auth::pq::SphincsAuth`
 --> src/byzantine/consensus.rs:9:5
  |
9 | use crate::quantum_auth::pq::SphincsAuth;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `Signature`
  --> src/quantum_auth/hybrid.rs:10:54
   |
10 | use ring::signature::{self, Ed25519KeyPair, KeyPair, Signature};
   |                                                      ^^^^^^^^^

warning: unused import: `crate::quantum_auth::pq::sphincs::SphincsAuth`
 --> src/quantum_auth/pq_auth.rs:2:5
  |
2 | use crate::quantum_auth::pq::sphincs::SphincsAuth;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `std::error::Error`
 --> src/quantum_auth/pq_auth.rs:3:5
  |
3 | use std::error::Error;
  |     ^^^^^^^^^^^^^^^^^

warning: unused import: `QKDKey`
 --> src/vrf/qkd_vrf.rs:2:52
  |
2 | use crate::qkd::etsi_api::{ETSIClient, DeviceType, QKDKey};
  |                                                    ^^^^^^

warning: unused import: `crate::quantum_auth::hybrid::HybridAuth`
 --> src/vrf/qkd_vrf.rs:4:5
  |
4 | use crate::quantum_auth::hybrid::HybridAuth;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `Deserialize` and `Serialize`
 --> src/zk/vrf.rs:1:13
  |
1 | use serde::{Deserialize, Serialize};
  |             ^^^^^^^^^^^  ^^^^^^^^^

warning: unused import: `std::cmp::min`
 --> src/zk/vrf.rs:2:5
  |
2 | use std::cmp::min;
  |     ^^^^^^^^^^^^^

warning: unused import: `std::fs`
 --> src/zk/vrf.rs:4:5
  |
4 | use std::fs;
  |     ^^^^^^^

warning: unused import: `std::process::Command`
 --> src/zk/vrf.rs:5:5
  |
5 | use std::process::Command;
  |     ^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `debug`
 --> src/zk/multi_source_generator.rs:4:15
  |
4 | use tracing::{debug, info};
  |               ^^^^^

warning: unused import: `std::collections::HashMap`
 --> src/zk/multi_source_proof.rs:4:5
  |
4 | use std::collections::HashMap;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused variable: `dest_id`
  --> src/qkd/etsi_api.rs:61:56
   |
61 |     pub async fn get_key_alice(&self, key_size: usize, dest_id: &str) -> Result<QKDKey, Box<dyn Error>> {
   |                                                        ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_dest_id`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `seed`
  --> src/vrf/mod.rs:31:13
   |
31 |         let seed = hasher.finalize();
   |             ^^^^ help: if this is intentional, prefix it with an underscore: `_seed`

warning: unused variable: `seed`
  --> src/vrf/mod.rs:56:13
   |
56 |         let seed = hasher.finalize();
   |             ^^^^ help: if this is intentional, prefix it with an underscore: `_seed`

warning: unused variable: `threshold`
   --> src/zk/multi_source_proof.rs:215:9
    |
215 |         threshold: usize,
    |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_threshold`

warning: unused variable: `nonce`
   --> src/zk/multi_source_proof.rs:216:9
    |
216 |         nonce: u64,
    |         ^^^^^ help: if this is intentional, prefix it with an underscore: `_nonce`

warning: field `0` is never read
  --> src/byzantine/consensus.rs:48:17
   |
48 |     PrePrepared(Vec<u8>),
   |     ----------- ^^^^^^^
   |     |
   |     field in this variant
   |
   = note: `ConsensusState` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis
   = note: `#[warn(dead_code)]` on by default
help: consider changing the field to be of unit type to suppress this warning while preserving the field numbering, or remove the field
   |
48 |     PrePrepared(()),
   |                 ~~

warning: field `0` is never read
  --> src/byzantine/consensus.rs:49:14
   |
49 |     Prepared(Vec<u8>),
   |     -------- ^^^^^^^
   |     |
   |     field in this variant
   |
   = note: `ConsensusState` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis
help: consider changing the field to be of unit type to suppress this warning while preserving the field numbering, or remove the field
   |
49 |     Prepared(()),
   |              ~~

warning: field `0` is never read
  --> src/byzantine/consensus.rs:51:16
   |
51 |     ViewChange(u64),
   |     ---------- ^^^
   |     |
   |     field in this variant
   |
   = note: `ConsensusState` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis
help: consider changing the field to be of unit type to suppress this warning while preserving the field numbering, or remove the field
   |
51 |     ViewChange(()),
   |                ~~

warning: field `timeout` is never read
  --> src/byzantine/manager.rs:26:5
   |
23 | pub struct ReporterManager {
   |            --------------- field in this struct
...
26 |     timeout: Duration,
   |     ^^^^^^^

warning: struct `ProvingKey` is never constructed
 --> src/quantum_auth/circuit.rs:4:12
  |
4 | pub struct ProvingKey;
  |            ^^^^^^^^^^

warning: function `build_circuit` is never used
 --> src/quantum_auth/circuit.rs:6:14
  |
6 | pub async fn build_circuit() -> Result<ProvingKey, Box<dyn Error>> {
  |              ^^^^^^^^^^^^^

warning: field `signer` is never read
  --> src/vrf/mod.rs:13:5
   |
11 | pub struct QuantumVRF {
   |            ---------- field in this struct
12 |     // Use your existing SPHINCS+ implementation
13 |     signer: HybridSignature,
   |     ^^^^^^

warning: fields `base_url` and `client` are never read
  --> src/qkd/etsi_api.rs:24:5
   |
23 | pub struct ETSIClient {
   |            ---------- fields in this struct
24 |     base_url: String,
   |     ^^^^^^^^
25 |     client: Client,
   |     ^^^^^^

warning: `qkd_client` (lib) generated 29 warnings (run `cargo fix --lib -p qkd_client` to apply 16 suggestions)
warning: unused imports: `ConsensusMessage`, `MessageType`, `ReporterEntry`, and `SharedBuffer`
 --> src/byzantine/mod.rs:6:18
  |
6 | pub use buffer::{ConsensusMessage, MessageType, ReporterEntry, SharedBuffer};
  |                  ^^^^^^^^^^^^^^^^  ^^^^^^^^^^^  ^^^^^^^^^^^^^  ^^^^^^^^^^^^

warning: unused imports: `ByzantineConsensus`, `ConsensusConfig`, and `ConsensusResult`
 --> src/byzantine/mod.rs:7:21
  |
7 | pub use consensus::{ByzantineConsensus, ConsensusConfig, ConsensusResult};
  |                     ^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^

warning: unused imports: `ReportResult` and `ReporterManager`
 --> src/byzantine/mod.rs:8:19
  |
8 | pub use manager::{ReportResult, ReporterManager};
  |                   ^^^^^^^^^^^^  ^^^^^^^^^^^^^^^

warning: unused imports: `SphincsError`, `SphincsPrivateKey`, `SphincsPublicKey`, `SphincsSignature`, and `SphincsVariant`
 --> src/quantum_auth/pq/mod.rs:5:18
  |
5 |     SphincsAuth, SphincsError, SphincsPrivateKey, SphincsPublicKey, SphincsSignature,
  |                  ^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^
6 |     SphincsVariant,
  |     ^^^^^^^^^^^^^^

warning: unused import: `hybrid::HybridAuth`
 --> src/quantum_auth/mod.rs:8:9
  |
8 | pub use hybrid::HybridAuth;
  |         ^^^^^^^^^^^^^^^^^^

warning: unused import: `pq::SphincsAuth`
  --> src/quantum_auth/mod.rs:11:9
   |
11 | pub use pq::SphincsAuth;
   |         ^^^^^^^^^^^^^^^

warning: struct `TestImport` is never constructed
 --> src/byzantine/buffer.rs:9:12
  |
9 | pub struct TestImport;
  |            ^^^^^^^^^^
  |
  = note: `TestImport` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis
  = note: `#[warn(dead_code)]` on by default

warning: fields `total_messages`, `messages_by_type`, `oldest_message_age`, and `newest_message_age` are never read
  --> src/byzantine/buffer.rs:46:9
   |
45 | pub struct BufferStats {
   |            ----------- fields in this struct
46 |     pub total_messages: usize,
   |         ^^^^^^^^^^^^^^
47 |     pub messages_by_type: HashMap<MessageType, usize>,
   |         ^^^^^^^^^^^^^^^^
48 |     pub oldest_message_age: Option<Duration>,
   |         ^^^^^^^^^^^^^^^^^^
49 |     pub newest_message_age: Option<Duration>,
   |         ^^^^^^^^^^^^^^^^^^
   |
   = note: `BufferStats` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis

warning: fields `messages`, `reports`, `capacity`, and `created_at` are never read
  --> src/byzantine/buffer.rs:55:5
   |
53 | pub struct SharedBuffer {
   |            ------------ fields in this struct
54 |     // Buffer of consensus messages with read-write lock for concurrent access
55 |     messages: RwLock<VecDeque<ConsensusMessage>>,
   |     ^^^^^^^^
...
58 |     reports: RwLock<Vec<ReporterEntry>>,
   |     ^^^^^^^
...
61 |     capacity: usize,
   |     ^^^^^^^^
...
64 |     created_at: Instant,
   |     ^^^^^^^^^^

warning: multiple associated items are never used
   --> src/byzantine/buffer.rs:69:12
    |
67  | impl SharedBuffer {
    | ----------------- associated items in this implementation
68  |     /// Create a new shared buffer with the specified capacity
69  |     pub fn new(capacity: usize) -> Arc<Self> {
    |            ^^^
...
79  |     pub fn push_message(&self, message: ConsensusMessage) -> bool {
    |            ^^^^^^^^^^^^
...
100 |     pub fn add_report(&self, report: ReporterEntry) {
    |            ^^^^^^^^^^
...
107 |     pub fn get_all_messages(&self) -> Vec<ConsensusMessage> {
    |            ^^^^^^^^^^^^^^^^
...
113 |     pub fn get_messages_by_type(&self, msg_type: MessageType) -> Vec<ConsensusMessage> {
    |            ^^^^^^^^^^^^^^^^^^^^
...
123 |     pub fn get_messages_by_view(&self, view: u64) -> Vec<ConsensusMessage> {
    |            ^^^^^^^^^^^^^^^^^^^^
...
133 |     pub fn get_all_reports(&self) -> Vec<ReporterEntry> {
    |            ^^^^^^^^^^^^^^^
...
139 |     pub fn get_reports_by_reporter(&self, reporter_id: &str) -> Vec<ReporterEntry> {
    |            ^^^^^^^^^^^^^^^^^^^^^^^
...
149 |     pub fn clear_old_messages(&self, max_age: Duration) -> usize {
    |            ^^^^^^^^^^^^^^^^^^
...
171 |     pub fn get_stats(&self) -> BufferStats {
    |            ^^^^^^^^^

warning: struct `ConsensusResult` is never constructed
  --> src/byzantine/consensus.rs:13:12
   |
13 | pub struct ConsensusResult {
   |            ^^^^^^^^^^^^^^^
   |
   = note: `ConsensusResult` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis

warning: fields `node_count`, `fault_tolerance`, `view_timeout`, `round_timeout`, and `max_rounds` are never read
  --> src/byzantine/consensus.rs:25:9
   |
24 | pub struct ConsensusConfig {
   |            --------------- fields in this struct
25 |     pub node_count: usize,
   |         ^^^^^^^^^^
26 |     pub fault_tolerance: usize,
   |         ^^^^^^^^^^^^^^^
27 |     pub view_timeout: Duration,
   |         ^^^^^^^^^^^^
28 |     pub round_timeout: Duration,
   |         ^^^^^^^^^^^^^
29 |     pub max_rounds: usize,
   |         ^^^^^^^^^^
   |
   = note: `ConsensusConfig` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis

warning: variants `PrePrepared`, `Prepared`, `Committed`, and `ViewChange` are never constructed
  --> src/byzantine/consensus.rs:48:5
   |
46 | enum ConsensusState {
   |      -------------- variants in this enum
47 |     Idle,
48 |     PrePrepared(Vec<u8>),
   |     ^^^^^^^^^^^
49 |     Prepared(Vec<u8>),
   |     ^^^^^^^^
50 |     Committed(Vec<u8>),
   |     ^^^^^^^^^
51 |     ViewChange(u64),
   |     ^^^^^^^^^^
   |
   = note: `ConsensusState` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis

warning: fields `state`, `auth`, `prepared_msgs`, and `commit_msgs` are never read
  --> src/byzantine/consensus.rs:59:5
   |
55 | pub struct ByzantineConsensus {
   |            ------------------ fields in this struct
...
59 |     state: Mutex<ConsensusState>,
   |     ^^^^^
60 |     auth: HybridAuth,
   |     ^^^^
...
63 |     prepared_msgs: Mutex<HashMap<u64, HashSet<String>>>,
   |     ^^^^^^^^^^^^^
64 |     commit_msgs: Mutex<HashMap<u64, HashSet<String>>>,
   |     ^^^^^^^^^^^

warning: multiple methods are never used
   --> src/byzantine/consensus.rs:114:12
    |
90  | impl ByzantineConsensus {
    | ----------------------- methods in this implementation
...
114 |     pub fn start_consensus(&self, value: Vec<u8>) -> Result<(), Box<dyn std::error::Error>> {
    |            ^^^^^^^^^^^^^^^
...
132 |     pub fn is_primary(&self) -> bool {
    |            ^^^^^^^^^^
...
138 |     pub fn run_consensus_round(&self) -> Result<ConsensusResult, Box<dyn std::error::Error>> {
    |            ^^^^^^^^^^^^^^^^^^^
...
200 |     fn process_messages(&self) -> Result<(), Box<dyn std::error::Error>> {
    |        ^^^^^^^^^^^^^^^^
...
220 |     fn process_pre_prepare_messages(
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
265 |     fn process_prepare_messages(
    |        ^^^^^^^^^^^^^^^^^^^^^^^^
...
337 |     fn process_commit_messages(
    |        ^^^^^^^^^^^^^^^^^^^^^^^
...
404 |     fn trigger_view_change(&self, old_view: u64) -> Result<(), Box<dyn std::error::Error>> {
    |        ^^^^^^^^^^^^^^^^^^^
...
431 |     fn create_message(
    |        ^^^^^^^^^^^^^^
...
471 |     fn get_primary_for_view(&self, view: u64) -> String {
    |        ^^^^^^^^^^^^^^^^^^^^

warning: struct `ReportResult` is never constructed
 --> src/byzantine/manager.rs:8:12
  |
8 | pub struct ReportResult {
  |            ^^^^^^^^^^^^

warning: struct `ConsensusResult` is never constructed
  --> src/byzantine/manager.rs:16:12
   |
16 | pub struct ConsensusResult {
   |            ^^^^^^^^^^^^^^^

warning: struct `ReporterManager` is never constructed
  --> src/byzantine/manager.rs:23:12
   |
23 | pub struct ReporterManager {
   |            ^^^^^^^^^^^^^^^

warning: associated items `new`, `run`, `check_current_consensus`, `generate_seed`, `with_fault_probability`, and `with_network_delay` are never used
   --> src/byzantine/manager.rs:31:12
    |
30  | impl ReporterManager {
    | -------------------- associated items in this implementation
31  |     pub fn new(reporter_count: usize, threshold: usize, timeout_ms: u64) -> Self {
    |            ^^^
...
40  |     pub async fn run(&self) -> Result<ConsensusResult, Box<dyn Error>> {
    |                  ^^^
...
150 |     fn check_current_consensus(&self) -> bool {
    |        ^^^^^^^^^^^^^^^^^^^^^^^
...
156 |     fn generate_seed(&self, results: &[ReportResult]) -> Vec<u8> {
    |        ^^^^^^^^^^^^^
...
173 |     pub fn with_fault_probability(self, fault_probability: f64) -> Self {
    |            ^^^^^^^^^^^^^^^^^^^^^^
...
181 |     pub fn with_network_delay(self, min_ms: u64, max_ms: u64) -> Self {
    |            ^^^^^^^^^^^^^^^^^^

warning: struct `VRFBasedConsensus` is never constructed
  --> src/byzantine/vrf_consensus.rs:10:12
   |
10 | pub struct VRFBasedConsensus {
   |            ^^^^^^^^^^^^^^^^^

warning: associated items `new`, `select_leader`, `verify_leader_selection`, `output_to_index`, and `get_node_id` are never used
   --> src/byzantine/vrf_consensus.rs:18:12
    |
16  | impl VRFBasedConsensus {
    | ---------------------- associated items in this implementation
17  |     /// Create a new VRF-based consensus node
18  |     pub fn new(vrf: IntegratedVRF, node_id: u64, quantum_key: Vec<u8>) -> Self {
    |            ^^^
...
29  |     pub fn select_leader(&self, round: u64, participants: &[u64]) -> Result<u64, Box<dyn Error>> {
    |            ^^^^^^^^^^^^^
...
59  |     pub fn verify_leader_selection(
    |            ^^^^^^^^^^^^^^^^^^^^^^^
...
117 |     fn output_to_index(
    |        ^^^^^^^^^^^^^^^
...
142 |     pub fn get_node_id(&self) -> u64 {
    |            ^^^^^^^^^^^

warning: fields `classical_keypair` and `quantum_auth` are never read
  --> src/quantum_auth/hybrid.rs:17:5
   |
16 | pub struct HybridAuth {
   |            ---------- fields in this struct
17 |     classical_keypair: Ed25519KeyPair,
   |     ^^^^^^^^^^^^^^^^^
18 |     quantum_auth: SphincsAuth,
   |     ^^^^^^^^^^^^

warning: struct `HybridProof` is never constructed
  --> src/quantum_auth/hybrid.rs:22:12
   |
22 | pub struct HybridProof {
   |            ^^^^^^^^^^^
   |
   = note: `HybridProof` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis

warning: variants `ClassicalSigning`, `ClassicalVerification`, `QuantumOperation`, and `SerializationError` are never constructed
  --> src/quantum_auth/hybrid.rs:38:5
   |
36 | pub enum HybridAuthError {
   |          --------------- variants in this enum
37 |     ClassicalKeyGeneration,
38 |     ClassicalSigning(String),
   |     ^^^^^^^^^^^^^^^^
39 |     ClassicalVerification(String),
   |     ^^^^^^^^^^^^^^^^^^^^^
40 |     QuantumOperation(String),
   |     ^^^^^^^^^^^^^^^^
41 |     SerializationError(String),
   |     ^^^^^^^^^^^^^^^^^^
   |
   = note: `HybridAuthError` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis

warning: multiple associated items are never used
   --> src/quantum_auth/hybrid.rs:76:12
    |
58  | impl HybridAuth {
    | --------------- associated items in this implementation
...
76  |     pub fn sign(&self, message: &[u8]) -> Result<HybridSignature, Box<dyn Error>> {
    |            ^^^^
...
119 |     pub fn verify(
    |            ^^^^^^
...
166 |     pub fn get_classical_public_key(&self) -> &[u8] {
    |            ^^^^^^^^^^^^^^^^^^^^^^^^
...
171 |     pub fn get_quantum_public_key(&self) -> &[u8] {
    |            ^^^^^^^^^^^^^^^^^^^^^^
...
176 |     pub fn serialize_signature(signature: &HybridSignature) -> Result<String, Box<dyn Error>> {
    |            ^^^^^^^^^^^^^^^^^^^
...
183 |     pub fn deserialize_signature(data: &str) -> Result<HybridSignature, Box<dyn Error>> {
    |            ^^^^^^^^^^^^^^^^^^^^^
...
191 |     pub fn authenticate(&self) -> Result<HybridProof, Box<dyn Error>> {
    |            ^^^^^^^^^^^^
...
219 |     fn verify_classical(
    |        ^^^^^^^^^^^^^^^^

warning: variants `Sha2128s`, `Shake128f`, and `Shake128s` are never constructed
  --> src/quantum_auth/pq/sphincs.rs:15:5
   |
13 | pub enum SphincsVariant {
   |          -------------- variants in this enum
14 |     Sha2128f,  // SHA-256, 128-bit security, fast
15 |     Sha2128s,  // SHA-256, 128-bit security, small
   |     ^^^^^^^^
16 |     Shake128f, // SHAKE-256, 128-bit security, fast
   |     ^^^^^^^^^
17 |     Shake128s, // SHAKE-256, 128-bit security, small
   |     ^^^^^^^^^
   |
   = note: `SphincsVariant` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis

warning: fields `public_key`, `private_key`, and `variant` are never read
  --> src/quantum_auth/pq/sphincs.rs:52:5
   |
51 | pub struct SphincsAuth {
   |            ----------- fields in this struct
52 |     public_key: sphincssha2128fsimple::PublicKey,
   |     ^^^^^^^^^^
53 |     private_key: sphincssha2128fsimple::SecretKey,
   |     ^^^^^^^^^^^
54 |     variant: SphincsVariant,
   |     ^^^^^^^
   |
   = note: `SphincsAuth` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: variants `InvalidKeySize`, `InvalidSignatureSize`, `SignatureVerificationFailed`, `KeyGenerationFailed`, `SerializationError`, and `ExternalLibraryError` are never constructed
  --> src/quantum_auth/pq/sphincs.rs:60:5
   |
59 | pub enum SphincsError {
   |          ------------ variants in this enum
60 |     InvalidKeySize(usize, usize),
   |     ^^^^^^^^^^^^^^
61 |     InvalidSignatureSize(usize, usize),
   |     ^^^^^^^^^^^^^^^^^^^^
62 |     SignatureVerificationFailed,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
63 |     KeyGenerationFailed,
   |     ^^^^^^^^^^^^^^^^^^^
64 |     SerializationError(String),
   |     ^^^^^^^^^^^^^^^^^^
65 |     ExternalLibraryError(String),
   |     ^^^^^^^^^^^^^^^^^^^^
   |
   = note: `SphincsError` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis

warning: associated items `with_variant`, `sign`, `verify`, `get_public_key`, `serialize_public_key`, and `deserialize_public_key` are never used
   --> src/quantum_auth/pq/sphincs.rs:114:12
    |
89  | impl SphincsAuth {
    | ---------------- associated items in this implementation
...
114 |     pub fn with_variant(variant: SphincsVariant) -> Result<Self, Box<dyn Error>> {
    |            ^^^^^^^^^^^^
...
139 |     pub fn sign(&self, message: &[u8]) -> Result<Vec<u8>, Box<dyn Error>> {
    |            ^^^^
...
169 |     pub fn verify(&self, message: &[u8], signature_bytes: &[u8]) -> Result<bool, Box<dyn Error>> {
    |            ^^^^^^
...
229 |     pub fn get_public_key(&self) -> &[u8] {
    |            ^^^^^^^^^^^^^^
...
234 |     pub fn serialize_public_key(&self) -> Result<Vec<u8>, Box<dyn Error>> {
    |            ^^^^^^^^^^^^^^^^^^^^
...
244 |     pub fn deserialize_public_key(data: &[u8]) -> Result<SphincsPublicKey, Box<dyn Error>> {
    |            ^^^^^^^^^^^^^^^^^^^^^^

warning: struct `QuantumVRF` is never constructed
  --> src/vrf/mod.rs:11:12
   |
11 | pub struct QuantumVRF {
   |            ^^^^^^^^^^

warning: associated items `new`, `generate`, and `verify` are never used
  --> src/vrf/mod.rs:17:12
   |
16 | impl QuantumVRF {
   | --------------- associated items in this implementation
17 |     pub fn new(signer: HybridSignature) -> Self {
   |            ^^^
...
22 |     pub fn generate(
   |            ^^^^^^^^
...
45 |     pub fn verify(
   |            ^^^^^^

warning: struct `QuantumVRF` is never constructed
  --> src/vrf/core.rs:11:12
   |
11 | pub struct QuantumVRF {
   |            ^^^^^^^^^^

warning: associated items `new`, `generate`, and `verify` are never used
  --> src/vrf/core.rs:17:12
   |
15 | impl QuantumVRF {
   | --------------- associated items in this implementation
16 |     /// Create a new VRF using the provided hybrid auth system
17 |     pub fn new(signer: HybridAuth) -> Self {
   |            ^^^
...
29 |     pub fn generate(
   |            ^^^^^^^^
...
79 |     pub fn verify(
   |            ^^^^^^

warning: struct `VRFResponse` is never constructed
 --> src/vrf/integrated.rs:7:12
  |
7 | pub struct VRFResponse {
  |            ^^^^^^^^^^^

warning: struct `IntegratedVRF` is never constructed
  --> src/vrf/integrated.rs:19:12
   |
19 | pub struct IntegratedVRF {
   |            ^^^^^^^^^^^^^

warning: associated items `new`, `generate_with_proof`, `verify_with_proof`, and `get_vrf` are never used
  --> src/vrf/integrated.rs:25:12
   |
23 | impl IntegratedVRF {
   | ------------------ associated items in this implementation
24 |     /// Create a new integrated VRF
25 |     pub fn new(signer: HybridAuth) -> Self {
   |            ^^^
...
32 |     pub fn generate_with_proof(
   |            ^^^^^^^^^^^^^^^^^^^
...
58 |     pub fn verify_with_proof(
   |            ^^^^^^^^^^^^^^^^^
...
84 |     pub fn get_vrf(&self) -> &QuantumVRF {
   |            ^^^^^^^

warning: struct `QKDVerifiableRandomFunction` is never constructed
 --> src/vrf/qkd_vrf.rs:8:12
  |
8 | pub struct QKDVerifiableRandomFunction {
  |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: associated items `new`, `generate_with_qkd`, and `verify_with_qkd` are never used
  --> src/vrf/qkd_vrf.rs:14:12
   |
13 | impl QKDVerifiableRandomFunction {
   | -------------------------------- associated items in this implementation
14 |     pub fn new(vrf: QuantumVRF, device_type: DeviceType, cert_path: &Path) -> Result<Self, Box<dyn Error>> {
   |            ^^^
...
24 |     pub async fn generate_with_qkd(&self, input: &[u8], dest_id: &str) -> Result<(Vec<u8>, Vec<u8>), Box<dyn Error>> {
   |                  ^^^^^^^^^^^^^^^^^
...
35 |     pub async fn verify_with_qkd(&self, input: &[u8], output: &[u8], proof: &[u8], key_id: &str) -> Result<bool, Box<dyn Error>> {
   |                  ^^^^^^^^^^^^^^^

warning: function `build_test_circuit` is never used
 --> src/zk/circuit.rs:6:14
  |
6 | pub async fn build_test_circuit() -> Result<CircomCircuit<Fr>, Box<dyn Error>> {
  |              ^^^^^^^^^^^^^^^^^^

warning: struct `VerifiableRandomFunction` is never constructed
  --> src/zk/vrf.rs:12:12
   |
12 | pub struct VerifiableRandomFunction {
   |            ^^^^^^^^^^^^^^^^^^^^^^^^

warning: multiple associated items are never used
   --> src/zk/vrf.rs:18:12
    |
16  | impl VerifiableRandomFunction {
    | ----------------------------- associated items in this implementation
17  |     /// Create a new VRF with the given seed
18  |     pub fn new(seed: &[u8]) -> Self {
    |            ^^^
...
25  |     pub fn generate(&self, input: &[u8]) -> Result<Vec<u8>, Box<dyn Error>> {
    |            ^^^^^^^^
...
35  |     pub fn verify(&self, input: &[u8], output: &[u8]) -> Result<bool, Box<dyn Error>> {
    |            ^^^^^^
...
39  |     pub fn prove(&self, input: &[u8]) -> Result<(Vec<u8>, Vec<u8>), Box<dyn Error>> {
    |            ^^^^^
...
52  |     pub fn elect_leader(&self, node_count: u64) -> Result<u64, Box<dyn Error>> {
    |            ^^^^^^^^^^^^
...
62  |     pub fn select_committee(
    |            ^^^^^^^^^^^^^^^^
...
90  |     pub fn from_multi_source_proof(
    |            ^^^^^^^^^^^^^^^^^^^^^^^
...
109 |     pub fn generate_zk_proof(&self, input: &[u8]) -> Result<Vec<u8>, Box<dyn Error>> {
    |            ^^^^^^^^^^^^^^^^^
...
127 |     pub fn verify_zk_proof(&self, input: &[u8], proof: &[u8]) -> Result<bool, Box<dyn Error>> {
    |            ^^^^^^^^^^^^^^^

warning: function `generate_vrf_proof` is never used
   --> src/zk/vrf.rs:151:8
    |
151 | pub fn generate_vrf_proof(quantum_key: &[u8], input_data: &[u8]) -> Result<String, Box<dyn Error>> {
    |        ^^^^^^^^^^^^^^^^^^

warning: function `verify_vrf_proof` is never used
   --> src/zk/vrf.rs:165:8
    |
165 | pub fn verify_vrf_proof(
    |        ^^^^^^^^^^^^^^^^

warning: struct `MultiSourceProofGenerator` is never constructed
  --> src/zk/multi_source_generator.rs:12:12
   |
12 | pub struct MultiSourceProofGenerator {
   |            ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: struct `MultiSourceProofResult` is never constructed
  --> src/zk/multi_source_generator.rs:18:12
   |
18 | pub struct MultiSourceProofResult {
   |            ^^^^^^^^^^^^^^^^^^^^^^

warning: associated items `new`, `generate_proof`, `generate_proof_with_consensus`, and `add_report` are never used
   --> src/zk/multi_source_generator.rs:27:12
    |
25  | impl MultiSourceProofGenerator {
    | ------------------------------ associated items in this implementation
26  |     /// Create a new multi-source proof generator
27  |     pub fn new(buffer: Arc<SharedBuffer>, threshold: usize) -> Self {
    |            ^^^
...
32  |     pub async fn generate_proof(&self) -> Result<MultiSourceProofResult, Box<dyn Error>> {
    |                  ^^^^^^^^^^^^^^
...
77  |     pub async fn generate_proof_with_consensus(
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
100 |     pub fn add_report(&self, report: ReporterEntry) {
    |            ^^^^^^^^^^

warning: struct `MultiSourceKeyProof` is never constructed
  --> src/zk/multi_source_proof.rs:12:12
   |
12 | pub struct MultiSourceKeyProof {
   |            ^^^^^^^^^^^^^^^^^^^

warning: multiple associated items are never used
   --> src/zk/multi_source_proof.rs:22:18
    |
20  | impl MultiSourceKeyProof {
    | ------------------------ associated items in this implementation
21  |     // Generate a new proof from multiple quantum key sources
22  |     pub async fn new(
    |                  ^^^
...
141 |     pub fn verify(&self) -> Result<bool, Box<dyn Error>> {
    |            ^^^^^^
...
179 |     pub fn export_for_verification(&self, path: &Path) -> Result<(), Box<dyn Error>> {
    |            ^^^^^^^^^^^^^^^^^^^^^^^
...
195 |     pub fn get_commitment(&self) -> &str {
    |            ^^^^^^^^^^^^^^
...
200 |     pub fn get_vrf_seed(&self) -> &str {
    |            ^^^^^^^^^^^^
...
205 |     fn check_file_exists(path: PathBuf) -> Result<PathBuf, Box<dyn Error>> {
    |        ^^^^^^^^^^^^^^^^^
...
213 |     fn prepare_input_file(
    |        ^^^^^^^^^^^^^^^^^^

warning: struct `ETSIClient` is never constructed
  --> src/qkd/etsi_api.rs:23:12
   |
23 | pub struct ETSIClient {
   |            ^^^^^^^^^^

warning: enum `DeviceType` is never used
  --> src/qkd/etsi_api.rs:31:10
   |
31 | pub enum DeviceType {
   |          ^^^^^^^^^^
   |
   = note: `DeviceType` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis

warning: associated items `new`, `get_key_alice`, and `get_key_bob` are never used
  --> src/qkd/etsi_api.rs:38:12
   |
37 | impl ETSIClient {
   | --------------- associated items in this implementation
38 |     pub fn new(device_type: DeviceType, cert_path: &Path) -> Result<Self, Box<dyn Error>> {
   |            ^^^
...
61 |     pub async fn get_key_alice(&self, key_size: usize, dest_id: &str) -> Result<QKDKey, Box<dyn Error>> {
   |                  ^^^^^^^^^^^^^
...
77 |     pub async fn get_key_bob(&self, key_id: &str) -> Result<QKDKey, Box<dyn Error>> {
   |                  ^^^^^^^^^^^

warning: `qkd_client` (bin "qkd_client") generated 74 warnings (23 duplicates) (run `cargo fix --bin "qkd_client"` to apply 6 suggestions)
    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.28s
     Running `/home/paraxiom/qkd_client/target/debug/qkd_client`
🌟 Starting Reporter Node...
[2m2025-03-02T19:05:25.367049Z[0m [34mDEBUG[0m [2mqkd_client::reporter::qkd_client[0m[2m:[0m Loading PKCS#12 and CA certificates...
[2m2025-03-02T19:05:25.367079Z[0m [34mDEBUG[0m [2mqkd_client::reporter::qkd_client[0m[2m:[0m 📂 Reading file: /home/paraxiom/qkd_client/certificate/Toshiba/certs/client_alice.p12
[2m2025-03-02T19:05:25.367136Z[0m [34mDEBUG[0m [2mqkd_client::reporter::qkd_client[0m[2m:[0m ✅ Successfully read 4494 bytes
[2m2025-03-02T19:05:25.367147Z[0m [34mDEBUG[0m [2mqkd_client::reporter::qkd_client[0m[2m:[0m 📂 Reading file: /home/paraxiom/qkd_client/certificate/Toshiba/certs/ca_crt.pem
[2m2025-03-02T19:05:25.367167Z[0m [34mDEBUG[0m [2mqkd_client::reporter::qkd_client[0m[2m:[0m ✅ Successfully read 2155 bytes
[2m2025-03-02T19:05:25.416203Z[0m [34mDEBUG[0m [2mqkd_client::reporter::qkd_client[0m[2m:[0m Retrieving key from https://192.168.0.4/api/v1/keys/bobsae/enc_keys
[2m2025-03-02T19:05:25.416224Z[0m [34mDEBUG[0m [2mqkd_client::reporter::qkd_client[0m[2m:[0m Sending request: KeyRequest { sae_id: "bobsae", key_size: 256, number_of_keys: 1 }
[2m2025-03-02T19:05:25.416590Z[0m [34mDEBUG[0m [2mhyper::client::connect::http[0m[2m:[0m connecting to 192.168.0.4:443
[2m2025-03-02T19:05:25.416893Z[0m [34mDEBUG[0m [2mhyper::client::connect::http[0m[2m:[0m connected to 192.168.0.4:443
[2m2025-03-02T19:05:25.433071Z[0m [34mDEBUG[0m [2mhyper::proto::h1::io[0m[2m:[0m flushed 245 bytes
[2m2025-03-02T19:05:25.529708Z[0m [34mDEBUG[0m [2mhyper::proto::h1::io[0m[2m:[0m parsed 5 headers
[2m2025-03-02T19:05:25.529739Z[0m [34mDEBUG[0m [2mhyper::proto::h1::conn[0m[2m:[0m incoming body is content-length (113 bytes)
[2m2025-03-02T19:05:25.529772Z[0m [34mDEBUG[0m [2mhyper::proto::h1::conn[0m[2m:[0m incoming body completed
[2m2025-03-02T19:05:25.529853Z[0m [34mDEBUG[0m [2mhyper::client::pool[0m[2m:[0m pooling idle connection for ("https", 192.168.0.4)
[2m2025-03-02T19:05:25.529890Z[0m [34mDEBUG[0m [2mqkd_client::reporter::qkd_client[0m[2m:[0m Response status: 200 OK
[2m2025-03-02T19:05:25.529993Z[0m [32m INFO[0m [2mqkd_client::reporter::qkd_client[0m[2m:[0m Successfully retrieved key with ID: d5b73f8a-ff98-4db1-8200-f2d67f30d7c7
[2m2025-03-02T19:05:25.530015Z[0m [34mDEBUG[0m [2mqkd_client::reporter[0m[2m:[0m Key retrieved in 113.832307ms
Starting proof generation for key...
Key bytes length: 32
Verifying circuit files...
❌ Reporting failed: WASM file not found at "/home/paraxiom/qkd_client/scripts/circuits/key_verification_js/key_verification.wasm"

>>> CARGO.TOML
================================================

>>> ALL SRC/.RS CODE
================================================
